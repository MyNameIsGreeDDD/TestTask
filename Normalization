1.Есть таблица с 3мя столбцами :
 1)Событие
 2)тип билета
 3)цена

 1ая форма нормализации соблюдена, тк таблица соблюдает правила 1ой формы:
 -В таблице не должно быть дублирующих строк (Дублирующиеся строки не появятся , как минимум, из-за того что цена никогда не повторится , потому что она зависит от события и типа билета.
 В одинаковых событиях нет смысла и у каждого события может быть Nое кол-во типов билетов)

 -В каждой ячейке таблицы хранится атомарное значение (Событие может быть только одно,цена и тип билета также)

 -В столбце хранятся данные одного типа(Событие  - строки, тип билета - строки, цена - числа)

 -Отсутствуют массивы и списки в любом виде

 2ая форма не соблюдена т.к 2ая форма гласит, что каждый не ключевой атрибут должен зависеть от Первичного ключа(ПК).
 В данной таблице сложно вывести первичный ключ или добавить его т.к событие не определяется по цене или типу билета,и также не определяется по типу билета и цене вместе взятыми.
 Тип билета не зависит ни от цены, ни от события.
 И только цена зависит от события и типа билета.
 Поэтому я решил привести таблицу к 2ой нормальной форме с помощью декомпозиции и разделил эту таблицу на 3:
 1)Таблица имеющяя 2 поля id_события и название_события( здесь первичный ключ - id)
 2)Таблица имеющяя 2 поля id_типа и название_типа_события( здесь первичный ключ - id)
 3)Таблица имеющая 3 поля id_события, id_типа и цена(здесь он составной  из id_события и id_типа)

 3яя форма соблюдена т.к  все значения не являющиеся первичным ключем зависят от первичного ключа.

2.Есть таблица с 4мя столбцами :
   1)Событие
   2)тип билета
   3)цена
   4)Баркод

1ая форма нормализации соблюдена, тк таблица соблюдает правила 1ой формы:
 -В таблице не должно быть дублирующих строк (Дублирующиеся строки не появятся , как минимум, из-за того что цена никогда не повторится , потому что она зависит от события и типа билета,а баркод уникален
 В одинаковых событиях нет смысла и у каждого события может быть Nое кол-во типов билетов)

 -В каждой ячейке таблицы хранится атомарное значение (Событие может быть только одно,цена,тип билета и  баркод)

 -В столбце хранятся данные одного типа(Событие  - строки, тип билета - строки, цена - числ, баркод - числа)

 -Отсутствуют массивы и списки в любом виде

2ая форма не соблюдена т.к 2ая форма гласит, что каждый не ключевой атрибут должен зависеть от Первичного ключа(ПК).
 В данной таблице сложно вывести первичный ключ или добавить его т.к событие не определяется по цене или типу билета,и также не определяется по типу билета и цене вместе взятыми.
 Тип билета не зависит ни от цены, ни от события.
 Цена зависит от события и типа билета.
 Баркод не нужен цене,не нужен событию и типу билета по отдельности.Баркод выступает в роле id. уникальным ключом купленного билета.Т.е он нужен всему, без баркода не получится идентифицировать билет, то к какому событию этот билет относится и к какому типу

 Поэтому я решил привести таблицу к 2ой нормальной форме с помощью декомпозиции и разделил эту таблицу на 4:
 1)Таблица имеющяя 2 поля id_события и название_события( здесь первичный ключ - id)
 2)Таблица имеющяя 2 поля id_типа и название_типа_события( здесь первичный ключ - id)
 3)Таблица имеющая 3 поля id_события, id_типа и цена(здесь он составной  из id_события и id_типа)
 4)Таблица имеющаяя 3 поля баркод,id_события, id_типа

 3яя форма соблюдена т.к  все значения не являющиеся первичным ключем зависят от первичного ключа.


Вид таблиц: https://docs.google.com/spreadsheets/d/1INJxFFlbg_gvBV93842eh7tRWh_lPZYzlrOXTnfhMF4/edit#gid=0
1)СREATE TABLE
 `events` (
    `event_id` INT NOT NULL AUTO_INCREMENT,
    `event_name` varchar(255) NOT NULL,
    PRIMARY KEY(`event_id`)
    )
2)СREATE TABLE
     `tickets` (
        `ticket_id` INT NOT NULL AUTO_INCREMENT,
        `ticket_type` varchar(255) NOT NULL,
        PRIMARY KEY(`ticket_id`)
        )
3)СREATE TABLE
       `price` (
          `ticket_id` INT NOT NULL,
          `event_id` INT NOT NULL,
          `price` INT,
          PRIMARY KEY(`ticket_id`,`event_id`),
          FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
          FOREIGN KEY (event_id) REFERENCES events(ticket_id)
          )
4)СREATE TABLE
         `price` (
            `ticket_id` INT NOT NULL,
            `event_id` INT NOT NULL,
            `barcode` INT,
            PRIMARY KEY(`barcode`),
            FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id),
            FOREIGN KEY (event_id) REFERENCES events(ticket_id)
            )

